#!/usr/bin/basic
REM requires yabasic 2.7x, download at www.yabasic.de

REM Author:  Artur Spengler
REM Website: www.github.com/letztes/tetris
REM License: GPL

dim BLOCK_COLOR(4)
dim rotated_figure(4)

COLUMNS = 10
ROWS = 20

REM measures in pixels
WINDOW_WIDTH = 640 rem PAL TV norm. More or less.
WINDOW_HEIGHT = 512
BLOCK_WIDTH = 25
FIELD_OFFSET_X = 200
FIELD_OFFSET_Y = 5
FIELD_WIDTH = BLOCK_WIDTH * COLUMNS
FIELD_HEIGHT = BLOCK_WIDTH * ROWS

PREVIEW_WINDOW_WIDTH  = BLOCK_WIDTH*6
PREVIEW_WINDOW_HEIGHT = BLOCK_WIDTH*6
PREVIEW_WINDOW_OFFSET_X = FIELD_OFFSET_X+FIELD_WIDTH+BLOCK_WIDTH
PREVIEW_WINDOW_OFFSET_Y = FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2+BLOCK_WIDTH*2

LINES_COUNT_WINDOW_WIDTH  = BLOCK_WIDTH*4
LINES_COUNT_WINDOW_HEIGHT = BLOCK_WIDTH
LINES_COUNT_WINDOW_OFFSET_X = 50
LINES_COUNT_WINDOW_OFFSET_Y = PREVIEW_WINDOW_OFFSET_Y

LEVEL_COUNT_WINDOW_WIDTH  = BLOCK_WIDTH*4
LEVEL_COUNT_WINDOW_HEIGHT = BLOCK_WIDTH
LEVEL_COUNT_WINDOW_OFFSET_X = LINES_COUNT_WINDOW_OFFSET_X
LEVEL_COUNT_WINDOW_OFFSET_Y = PREVIEW_WINDOW_OFFSET_Y + 50

POINTS_COUNT_WINDOW_WIDTH  = BLOCK_WIDTH*4
POINTS_COUNT_WINDOW_HEIGHT = BLOCK_WIDTH
POINTS_COUNT_WINDOW_OFFSET_X = LEVEL_COUNT_WINDOW_OFFSET_X
POINTS_COUNT_WINDOW_OFFSET_Y = LEVEL_WINDOW_OFFSET_Y + 50

REM measures in blocks
dim MATRIX(10,20)

REM needs to be adjusted to the actual figure when necessary
START_X = 5
START_Y = 0
PREVIEW_START_X = 3
PREVIEW_START_Y = 0

REM subroutines can return only one single value. so when rotating the brick, the adjustment of root_block_x and root_block_y needs the workaround with global intermediate variables
INTERMEDIATE_BLOCK_X = 0
INTERMEDIATE_BLOCK_y = 0

REM measures in seconds
TIMEQUANT = 0.1

REM various
TIMELOOPS = 15
LINES_TOTAL = 0
LEVEL_TOTAL = 0
POINTS_TOTAL = 0




sub clear_block(block_x, block_y)
    MATRIX(block_x, block_y) = 0
    color 0,0,0
    fill rectangle FIELD_OFFSET_X+block_x*BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH to FIELD_OFFSET_X+block_x*BLOCK_WIDTH+BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
end sub


sub draw_block(block_x, block_y, figure_number, preview)
    local inner_color$ REM dark blue or bright blue
    local border_color$ REM dark blue
    local shining_color$ REM white
    local dark_blue$
    local bright_blue$
    local offset_x
    local offset_y
    
    shining_color$ = "234,234,234"
    dark_blue$ = "105,105,220"
    bright_blue$ = "155,155,220"
    
    if preview=1 then
        offset_x = PREVIEW_WINDOW_OFFSET_X
        offset_y = PREVIEW_WINDOW_OFFSET_Y+BLOCK_WIDTH
    else
        offset_x = FIELD_OFFSET_X
        offset_y = FIELD_OFFSET_Y
        MATRIX(block_x, block_y) = -1 * figure_number
    fi
    
    switch figure_number
        case 0: return REM empty block
        case 4: case 5: case 6: case 7: case 14: case 15: inner_color$=bright_blue$: border_color$=bright_blue$: break
        case 8: case 9: case 10: case 11: case 12: case 13: inner_color$=dark_blue$: border_color$=dark_blue$: break
        default: inner_color$=shining_color$: border_color$=dark_blue$
    end switch
    color inner_color$
    fill rectangle offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
    color 1,1,1
    REM Black border around the brick, 2px thick
    rectangle offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
    rectangle offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH+1 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-1, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-1
    REM Colored Border, 2px thick
    color border_color$
    rectangle offset_x+block_x*BLOCK_WIDTH+2, offset_y+block_y*BLOCK_WIDTH+2 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-2, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-2
    rectangle offset_x+block_x*BLOCK_WIDTH+3, offset_y+block_y*BLOCK_WIDTH+3 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-3, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-3
    
    REM White shining in the upper right corner
    color shining_color$
    dot offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH
    dot offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH
    dot offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+1
    dot offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH+1
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+5
    dot offset_x+block_x*BLOCK_WIDTH+5, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+6, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+6
    dot offset_x+block_x*BLOCK_WIDTH+5, offset_y+block_y*BLOCK_WIDTH+5
end sub


sub clear_figure(block_x, block_y, figure())
    local i
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            clear_block(block_x, block_y)
        elsif figure(i) = 1 then
            block_x = block_x + 1
            clear_block(block_x, block_y)
        elsif figure(i) = 2 then
            block_x = block_x - 1
            clear_block(block_x, block_y)
        elsif figure(i) = 3 then
            block_y = block_y - 1
            clear_block(block_x, block_y)
        fi
    next
end sub


sub draw_figure(block_x, block_y, figure(), figure_number)
    local i
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 1 then
            block_x = block_x + 1
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 2 then
            block_x = block_x - 1
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 3 then
            block_y = block_y - 1
            draw_block(block_x, block_y, figure_number)
        fi
    next
    
end sub

sub display_preview_figure(next_figure_number)
    local next_figure_root_block_x
    local next_figure_root_block_y
    local next_figure(4)
    
    choose_figure(next_figure(), next_figure_number)
    
    next_figure_root_block_x = set_root_block_x(PREVIEW_START_X, next_figure_number)
    next_figure_root_block_y = set_root_block_y(PREVIEW_START_Y, next_figure_number)

    REM clear the preview window
    color 11,11,51
    fill rectangle PREVIEW_WINDOW_OFFSET_X, PREVIEW_WINDOW_OFFSET_Y to PREVIEW_WINDOW_OFFSET_X+PREVIEW_WINDOW_WIDTH, PREVIEW_WINDOW_OFFSET_Y+PREVIEW_WINDOW_HEIGHT
    
    REM draw the next figure
    color 150,150,150
    draw_preview_figure(next_figure_root_block_x, next_figure_root_block_y, next_figure(), next_figure_number)
    
end sub

sub draw_preview_figure(block_x, block_y, preview_figure(), next_figure_number)
    local i
    local preview
    preview = 1
    for i=0 to arraysize(preview_figure(), 1)
        if preview_figure(i) = 0 then
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 1 then
            block_x = block_x + 1
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 2 then
            block_x = block_x - 1
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 3 then
            block_y = block_y - 1
            draw_block(block_x, block_y, next_figure_number, preview)
        fi
    next
    
end sub


sub choose_figure(figure(), figure_number)
    
    if figure_number = 1 then          REM horizontal stick
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 2 then       REM vertical stick
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 3 then       REM square block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 4 then       REM bottom-left nose down horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 5 then       REM bottom-right nose top left vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 6 then       REM bottom-left nose up horizontal L
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 7 then       REM nose bottom right vertical L
        figure(0) = 0
        figure(1) = 2
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
        
        
        
    elsif figure_number = 8 then       REM bottom-right nose down horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 9 then       REM nose bottom left vertical L
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 10 then       REM bottom-right nose up left horizontal L
        figure(0) = 0
        figure(1) = 2
        figure(2) = 2
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 11 then       REM bottom-left nose top right vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 1
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 12 then       REM left bottom horizontal S-block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 13 then      REM right bottom vertical S-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 3
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 14 then       REM right bottom horizontal S-block
        figure(0) = 0
        figure(1) = 2
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 15 then       REM left bottom vertical S-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 3
        figure(4) = 0
        return 1
        
    elsif figure_number = 16 then      REM nose top horizontal T-block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    elsif figure_number = 17 then      REM nose right vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    elsif figure_number = 18 then      REM nose down horizontal T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 1
        return 1
    elsif figure_number = 19 then      REM nose left vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 3
        return 1
        
    fi
end sub


sub set_root_block_x(root_block_x, figure_number)
    switch figure_number
        case 1: return root_block_x-2  REM horizontal stick
        case 3: return root_block_x-1  REM square block
        case 4: return root_block_x-1  REM bottom-left horizontal L
        case 5: return root_block_x+1  REM L
        case 6: return root_block_x-1  REM L
        case 7: return root_block_x+1  REM L
        case 8: return root_block_x+1  REM right bottom horizontal S-block
        case 9: return root_block_x-1  REM L
        case 10: return root_block_x+1  REM L
        case 11: return root_block_x-1 REM L
        
        case 12: return root_block_x-1 REM left bottom horizontal S-block
        case 13: return root_block_x+1 REM right bottom vertical S-block
        case 14: return root_block_x   REM right bottom horizontal S-block
        case 15: return root_block_x   REM left bottom vertical S-block
        
        case 16: return root_block_x-1 REM nose top horizontal T-block
        case 18: return root_block_x-1 REM nose down horizontal T-block
        default: return root_block_x
    end switch
end sub


sub set_root_block_y(root_block_y, figure_number)
    switch figure_number
        case 1: return root_block_y    REM horizontal stick
        case 2: return root_block_y+3  REM vertical stick
        
        case 5: return root_block_y+2  REM vertical L
        case 7: return root_block_y+2  REM vertical L
        case 9: return root_block_y+2  REM vertical L
        case 11: return root_block_y+2 REM vertical L
        
        case 13: return root_block_y+2 REM vertical S-block
        case 15: return root_block_y+2 REM vertical S-block
        
        case 17: return root_block_y+2 REM nose left vertical T-block
        case 19: return root_block_y+2 REM nose right vertical T-block
        default: return root_block_y+1
    end switch
end sub


sub pause_game()
    local keystroke$
    keystroke$ = inkey$()
    if keystroke$ = "p" then
        return 1
    fi
end sub


sub game_over()
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    color 150,150,150
    text int(WINDOW_WIDTH/2)-25, int(WINDOW_HEIGHT/2), "Game Over"
    inkey$
    exit
end sub


sub is_move_ok(figure(), block_x, block_y)
    local i
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 1 then
            block_x = block_x + 1
        elsif figure(i) = 2 then
            block_x = block_x - 1
        elsif figure(i) = 3 then
            block_y = block_y - 1
        fi
        if block_x < 0: return 0
        if block_x > 9: return 0
        if block_y < 0: return 0
        if block_y > 19: return 0
        if MATRIX(block_x, block_y) > 0: return 0
    next
    return 1
end sub


sub rotate_clockwise(root_block_x, root_block_y, figure(), figure_number)
REM global INTERMEDIATE_BLOCKS are necessary because the sub cannot return multiple values
REM local temporary_blocks come handy in this sub to make things shorter
    INTERMEDIATE_BLOCK_X = root_block_x
    INTERMEDIATE_BLOCK_Y = root_block_y
    
    REM horizontal stick
    if figure_number=1 then
        figure_number_rotated = 2
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y+1) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y+1
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM vertical stick
    elsif figure_number=2 then
        figure_number_rotated = 1
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y-1) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y-1
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM No need to rotate the square block
    
    REM bottom-left nose down horizontal L
    elsif figure_number=4 then
        figure_number_rotated = 5
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose top left vertical L
    elsif figure_number=5 then
        figure_number_rotated = 6
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-left nose up horizontal L
    elsif figure_number=6 then
        figure_number_rotated = 7
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose bottom right vertical L
    elsif figure_number=7 then
        figure_number_rotated = 4
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose down horizontal L
    elsif figure_number=8 then
        figure_number_rotated = 9
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose bottom left vertical L
    elsif figure_number=9 then
        figure_number_rotated = 10
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose up left horizontal L
    elsif figure_number=10 then
        figure_number_rotated = 11
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-left nose top right vertical L
    elsif figure_number=11 then
        figure_number_rotated = 8
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
    REM left bottom horizontal S-block    
    elsif figure_number=12 then
        figure_number_rotated = 13
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM right bottom vertical S-block
    elsif figure_number=13 then
        figure_number_rotated = 12
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM right bottom horizontal S-block    
    elsif figure_number=14 then
        figure_number_rotated = 15
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM left bottom vertical S-block
    elsif figure_number=15 then
        figure_number_rotated = 14
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM left bottom nose top horizontal T-brick
    elsif figure_number=16 then
        figure_number_rotated = 17
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose right vertical T-block
    elsif figure_number=17 then
        figure_number_rotated = 18
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose down horizontal T-block
    elsif figure_number=18 then
        figure_number_rotated = 19
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose left vertical T-block
    elsif figure_number=19 then
        figure_number_rotated = 16
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
    fi
    return figure_number
end sub


sub calculate_figure_number()
    figure_number = int(ran(19))+1 REM 0 means empty
    switch figure_number
REM Double the probability for the left bottom S block
        case 20: figure_number = 12
        case 21: figure_number = 13
REM Double the probability for the right bottom S block
        case 22: figure_number = 14
        case 23: figure_number = 15
REM Double the probability for the stick
        case 24: figure_number = 1
        case 25: figure_number = 2
REM Quadruple the probability for the square block
        case 26: figure_number = 3
        case 27: figure_number = 3
        case 28: figure_number = 3
    end switch
    return figure_number
end sub


sub main()

REM Testvariables
            local y
            local x
            
            
    clear screen REM reading keystrokes with inkey$() needs 'clear screen'
    open window WINDOW_WIDTH, WINDOW_HEIGHT
    backcolor 0,0,0
    REM backcolor does not work, that is why big black rectangle
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    
    REM draw field border
    color 150,150,150
    rectangle FIELD_OFFSET_X-1, FIELD_OFFSET_Y-1 to FIELD_OFFSET_X+FIELD_WIDTH+1, FIELD_OFFSET_Y+FIELD_HEIGHT+1
    REM draw next figure window
    rectangle PREVIEW_WINDOW_OFFSET_X-1, PREVIEW_WINDOW_OFFSET_Y-1 to PREVIEW_WINDOW_OFFSET_X+PREVIEW_WINDOW_WIDTH+1, PREVIEW_WINDOW_OFFSET_Y+PREVIEW_WINDOW_HEIGHT+1
    
    REM draw total lines counter
    count_lines(LINES_TOTAL)
    
    local figure_number
    local figure(4)
    local next_figure_number
    
    next_figure_number = calculate_figure_number()
    
    local i
    
REM   "while not game over"-LOOP
    while(1=1)
        
        figure_number = next_figure_number
        next_figure_number = calculate_figure_number()
        
        display_preview_figure(next_figure_number)
        
REM arrays are passed by reference to subroutines; no need to return the array
        choose_figure(figure(), figure_number)
        
        
        root_block_x = set_root_block_x(START_X, figure_number)
        root_block_y = set_root_block_y(START_Y, figure_number)
        
        if !is_move_ok(figure(), root_block_x, root_block_y) then
            draw_figure(root_block_x, root_block_y, figure(), figure_number)
            wait TIMEQUANT*10
            game_over()
        fi
        
        if root_block_y > 0: clear_figure(root_block_x, root_block_y, figure())
        root_block_y = root_block_y + 1
        draw_figure(root_block_x, root_block_y, figure(), figure_number)
                
REM       "while figure is falling down and has not landed yet"-LOOP
        while(1=1)
            for i = 1 to TIMELOOPS
                keystroke$ = inkey$(TIMEQUANT)
                if !keystroke$="" then
                    if keystroke$ = "right" then
                        if is_move_ok(figure(), root_block_x+1, root_block_y) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_x = root_block_x + 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "left" then
                        if is_move_ok(figure(), root_block_x-1, root_block_y) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_x = root_block_x - 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "down" then
                        if is_move_ok(figure(), root_block_x, root_block_y+1) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_y = root_block_y + 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "up" then
                        figure_number = rotate_clockwise(root_block_x, root_block_y, figure(), figure_number)
                        root_block_x = INTERMEDIATE_BLOCK_X
                        root_block_y = INTERMEDIATE_BLOCK_Y
                    elsif keystroke$ = "p" then
                        pause_game()
                    elsif keystroke$ = "q" or keystroke$ = "esc" then
                        exit
                    fi
                fi
            next
            if root_block_y < 19 and is_move_ok(figure(), root_block_x, root_block_y+1) then
                clear_figure(root_block_x, root_block_y, figure())
                root_block_y = root_block_y + 1
                draw_figure(root_block_x, root_block_y, figure(), figure_number)
            else
                turn_is_over(root_block_x, root_block_y, figure())
                break
            fi
        wend
    wend
    print "not allowed to get to here!"
    game_over()
end sub

main()

REM ######################





sub turn_is_over(block_x, block_y, figure())

REM This subroutine is divided into four parts
REM Part 1: Fixate the current brick
REM Part 2: Check if some lines are complete; exit the routine if none
REM Part 3: Remove the complete lines
REM Part 4: Drop the lines above

REM Before any parts, define the local variables for this subroutine
    local i
    local complete_lines(4) REM array to store the y-coordinates of complete lines
    local complete_lines_in_figure(4) REM array to store the y-coordinates of complete lines
    local block_y_to_check REM iterator variable
    local block_x_to_check REM iterator variable
    local block_y_original REM needed for checking the lines
    local lines_dropped REM counter variable for gaining the level and the speed
    local y_iterator
    local figure_number_above
    local lines_in_figure
    local lowest_complete_line
    local complete_lines_in_figure_cat$
    
    block_y_original = block_y
    complete_lines_in_figure_cat$ = "0000"
    
REM First part:
REM Fixate the current brick
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 1 then
            block_x = block_x + 1
        elsif figure(i) = 2 then
            block_x = block_x - 1
        elsif figure(i) = 3 then
            block_y = block_y - 1
        fi
        MATRIX(block_x, block_y) = abs(MATRIX(block_x, block_y))
    next
REM Second part:
REM Check if some lines are compelete and if so remove them in the next step;
REM exit the routine otherwise
    i = 0
    for block_y_to_check=0 to 3 REM the rows in the figure
        for block_x_to_check=0 to 9 REM the columns in the field
            if block_y_original-block_y_to_check < 0 then
                game_over()
            elsif MATRIX(block_x_to_check, block_y_original-block_y_to_check) = 0 then
                goto CHECK_LINES_NEXT
            fi
        next
        complete_lines(i)=block_y_original-block_y_to_check
        complete_lines_in_figure(i)=1
        lines_dropped = lines_dropped + 1

        label CHECK_LINES_NEXT
        
        i=i+1
    next
REM If no lines were completed, exit the subroutine
    if lines_dropped = 0 then
        return
    fi
    
REM Part 3: Remove the complete lines
REM Remove the lines
    REM remove in the current line all blocks, beginning with
    REM blocks 4 and 5, then wait 0.1 sec, then blocks 3 and 6, etc.
    for block_x_to_change=0 to 4
        for i=0 to 3
            REM if in the line no empty blocks are encountered
            if complete_lines_in_figure(i)=1 then
                clear_block(5+block_x_to_change, complete_lines(i))
                clear_block(4-block_x_to_change, complete_lines(i))
            fi
        next
        wait 0.1
    next
    
    
REM Part 4: Drop the lines above
REM         Therefore first the array with the lines in figure needs to be
REM         adjusted, so the dropping routine does not need to look ahead
REM         but simple drops the line according to the array
    
REM adjust the number of lines to look ahead when dropping
    mid$(complete_lines_in_figure_cat$,1,1) = str$(complete_lines_in_figure(0))
    mid$(complete_lines_in_figure_cat$,2,1) = str$(complete_lines_in_figure(1))
    mid$(complete_lines_in_figure_cat$,3,1) = str$(complete_lines_in_figure(2))
    mid$(complete_lines_in_figure_cat$,4,1) = str$(complete_lines_in_figure(3))
    
#    print complete_lines_in_figure_cat$
    switch complete_lines_in_figure_cat$
        case "1000": complete_lines_in_figure_cat$ = "1111": break
        case "0100": complete_lines_in_figure_cat$ = "0111": break
        case "0010": complete_lines_in_figure_cat$ = "0011": break
        case "0001": complete_lines_in_figure_cat$ = "0001": break
        case "1100": complete_lines_in_figure_cat$ = "2222": break
        case "0110": complete_lines_in_figure_cat$ = "0222": break
        case "0011": complete_lines_in_figure_cat$ = "0022": break
        case "1010": complete_lines_in_figure_cat$ = "1222": break
        case "0101": complete_lines_in_figure_cat$ = "0122": break
        case "1001": complete_lines_in_figure_cat$ = "1122": break
        case "0111": complete_lines_in_figure_cat$ = "0333": break
        case "1011": complete_lines_in_figure_cat$ = "1333": break
        case "1101": complete_lines_in_figure_cat$ = "2333": break
        case "1110": complete_lines_in_figure_cat$ = "3333": break
        case "1111": complete_lines_in_figure_cat$ = "4444": break
    
    end switch
    
    complete_lines_in_figure(0) = val(mid$(complete_lines_in_figure_cat$,1,1))
    complete_lines_in_figure(1) = val(mid$(complete_lines_in_figure_cat$,2,1))
    complete_lines_in_figure(2) = val(mid$(complete_lines_in_figure_cat$,3,1))
    complete_lines_in_figure(3) = val(mid$(complete_lines_in_figure_cat$,4,1))
    
#    print complete_lines_in_figure_cat$
#    inkey$
    
    
REM Determine the lowest complete lines, i.e. where to start to drop
    for i=0 to 3
        if complete_lines(i)<>0 then
            lowest_complete_line = complete_lines(i)
            lowest_complete_line_index = i
            break
        fi
    next
    
REM Begin to actually drop the lines above the complete ones
    lines_in_figure = lowest_complete_line_index
    for y_iterator=lowest_complete_line to 1 step -1
        
            for block_x_to_change=0 to 9
                clear_block(block_x_to_change, y_iterator)
                if y_iterator-lines_in_figure > 0 then
                    figure_number_above = abs(MATRIX(block_x_to_change, y_iterator-complete_lines_in_figure(lines_in_figure)))
                    draw_block(block_x_to_change, y_iterator, figure_number_above)
                
REM because draw_block() makes only negative entries into MATRIX
                    MATRIX(block_x_to_change, y_iterator) = MATRIX(block_x_to_change, y_iterator) * -1
                fi
            next
            if lines_in_figure < 3 then
                lines_in_figure = lines_in_figure + 1
            fi
    next
    count_lines(lines_dropped) REM and levels and points
end sub


sub count_lines(lines_dropped)

REM and print them out
    LINES_TOTAL = LINES_TOTAL + lines_dropped
REM clear rectangle for text and print LINES_TOTAL
    color 0,0,0
    fill rectangle LINES_COUNT_WINDOW_OFFSET_X,LINES_COUNT_WINDOW_OFFSET_Y to LINES_COUNT_WINDOW_OFFSET_X+LINES_COUNT_WINDOW_WIDTH, LINES_COUNT_WINDOW_OFFSET_Y+LINES_COUNT_WINDOW_HEIGHT
REM print text
    color 255,255,255
    text LINES_COUNT_WINDOW_OFFSET_X+10,LINES_COUNT_WINDOW_OFFSET_Y+20,"Lines: "
    text LINES_COUNT_WINDOW_OFFSET_X+50,LINES_COUNT_WINDOW_OFFSET_Y+21,str$(LINES_TOTAL)
REM gain speed if another 10 lines are full
REM or the game just begun
    if LINES_TOTAL - LEVEL_TOTAL * 10 >= 0 and TIMELOOPS > 1 or LEVEL_TOTAL = 0 then
        color 0,0,0
        fill rectangle LEVEL_COUNT_WINDOW_OFFSET_X,LEVEL_COUNT_WINDOW_OFFSET_Y to LEVEL_COUNT_WINDOW_OFFSET_X+LEVEL_COUNT_WINDOW_WIDTH, LEVEL_COUNT_WINDOW_OFFSET_Y+LEVEL_COUNT_WINDOW_HEIGHT
REM print text LEVEL_TOTAL
        TIMELOOPS = TIMELOOPS - 1
        LEVEL_TOTAL = LEVEL_TOTAL + 1
        color 255,255,255
        text LEVEL_COUNT_WINDOW_OFFSET_X+10,LEVEL_COUNT_WINDOW_OFFSET_Y+20,"LEVEL: "
        text LEVEL_COUNT_WINDOW_OFFSET_X+50,LEVEL_COUNT_WINDOW_OFFSET_Y+20,str$(LEVEL_TOTAL)
        
    fi
REM clear window area for POINTS_TOTAL
    color 0,0,0
    fill rectangle POINTS_COUNT_WINDOW_OFFSET_X,POINTS_COUNT_WINDOW_OFFSET_Y to POINTS_COUNT_WINDOW_OFFSET_X+POINTS_COUNT_WINDOW_WIDTH, POINTS_COUNT_WINDOW_OFFSET_Y+POINTS_COUNT_WINDOW_HEIGHT
REM print text POINTS_TOTAL
    POINTS_TOTAL = POINTS_TOTAL + 133 * lines_dropped * LEVEL_TOTAL
    color 255,255,255
    text POINTS_COUNT_WINDOW_OFFSET_X+10,POINTS_COUNT_WINDOW_OFFSET_Y+20,"POINTS: "
    text POINTS_COUNT_WINDOW_OFFSET_X+60,POINTS_COUNT_WINDOW_OFFSET_Y+20,str$(POINTS_TOTAL)
end sub

















