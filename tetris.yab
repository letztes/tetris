#!/usr/bin/basic
# yabasic 2.7x


# TODO
# FIXES: 
#
# REFACTORING
# Make rotate_clockwise() more compact, there is to much repeating code
# Define all the nonglobal variables as locals
#
# FEATURES
# Displaying the keydescription, i.g. "Esc for exit"
# Deletion of complete lines
# Brickrotation counterclockwise
# Different colors in different bricks
# Counting up levels with each 10 completed lines and gaining speed
# Counting points
#
# DONE
# Add preview of next brick

dim BLOCK_COLOR(4)
dim rotated_figure(4)

COLUMNS = 10
ROWS = 20

# measures in pixels
WINDOW_WIDTH = 768 rem PAL TV norm. More or less.
WINDOW_HEIGHT = 576
BLOCK_WIDTH = 25
FIELD_OFFSET_X = 200
FIELD_OFFSET_Y = 50
FIELD_WIDTH = BLOCK_WIDTH * COLUMNS
FIELD_HEIGHT = BLOCK_WIDTH * ROWS

PREVIEW_WINDOW_WIDTH  = BLOCK_WIDTH*6
PREVIEW_WINDOW_HEIGHT = BLOCK_WIDTH*6
PREVIEW_WINDOW_OFFSET_X = FIELD_OFFSET_X+FIELD_WIDTH+PREVIEW_WINDOW_WIDTH/2
PREVIEW_WINDOW_OFFSET_Y = FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2+BLOCK_WIDTH

# measures in blocks
dim MATRIX(10,20)

# needs to be adjusted to the actual figure when necessary
START_X = 5
START_Y = 0
PREVIEW_START_X = 3
PREVIEW_START_Y = 0

# subroutines can return only one single value. so when rotating the brick, the adjustment of root_block_x and root_block_y needs the workaround with global intermediate variables
INTERMEDIATE_BLOCK_X = 0
INTERMEDIATE_BLOCK_y = 0

# measures in seconds
TIMEQUANT = 0.1




sub clear_block(block_x, block_y)
    MATRIX(block_x, block_y) = 0
    color 0,0,0
    fill rectangle FIELD_OFFSET_X+block_x*BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH to FIELD_OFFSET_X+block_x*BLOCK_WIDTH+BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
end sub


sub draw_block(block_x, block_y, figure_number, preview)
    local inner_color$
    local border_color$
    local shining_color$
    local offset_x
    local offset_y
    
    shining_color$ = "234,234,234" REM white
    if preview=1 then
        offset_x = PREVIEW_WINDOW_OFFSET_X
        offset_y = PREVIEW_WINDOW_OFFSET_Y
    else
        offset_x = FIELD_OFFSET_X
        offset_y = FIELD_OFFSET_Y
    fi
    
    MATRIX(block_x, block_y) = -1
    switch figure_number
        case 3: case 4: case 5: case 6: case 13: case 14: inner_color$="155,155,200": border_color$="155,155,200": break
        case 7: case 8: case 9: case 10: case 11: case 12: inner_color$="115,115,220": border_color$="115,115,220": break
        default: inner_color$=shining_color$: border_color$="115,115,220"
    end switch
    color inner_color$
    fill rectangle offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
    color 1,1,1
    REM Black border around the brick, 2px thick
    rectangle offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
    rectangle offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH+1 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-1, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-1
    REM Colored Border, 2px thick
    color border_color$
    rectangle offset_x+block_x*BLOCK_WIDTH+2, offset_y+block_y*BLOCK_WIDTH+2 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-2, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-2
    rectangle offset_x+block_x*BLOCK_WIDTH+3, offset_y+block_y*BLOCK_WIDTH+3 to offset_x+block_x*BLOCK_WIDTH+BLOCK_WIDTH-3, offset_y+block_y*BLOCK_WIDTH+BLOCK_WIDTH-3
    
    REM White shining in the upper right corner
    color shining_color$
    dot offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH
    dot offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH
    dot offset_x+block_x*BLOCK_WIDTH, offset_y+block_y*BLOCK_WIDTH+1
    dot offset_x+block_x*BLOCK_WIDTH+1, offset_y+block_y*BLOCK_WIDTH+1
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+5
    dot offset_x+block_x*BLOCK_WIDTH+5, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+6, offset_y+block_y*BLOCK_WIDTH+4
    dot offset_x+block_x*BLOCK_WIDTH+4, offset_y+block_y*BLOCK_WIDTH+6
    dot offset_x+block_x*BLOCK_WIDTH+5, offset_y+block_y*BLOCK_WIDTH+5
end sub


sub clear_figure(block_x, block_y, figure())
    local i
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            clear_block(block_x, block_y)
        elsif figure(i) = 1 then
            block_x = block_x + 1
            clear_block(block_x, block_y)
        elsif figure(i) = 2 then
            block_x = block_x - 1
            clear_block(block_x, block_y)
        elsif figure(i) = 3 then
            block_y = block_y - 1
            clear_block(block_x, block_y)
        fi
    next
end sub


sub draw_figure(block_x, block_y, figure(), figure_number)
    local i
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 1 then
            block_x = block_x + 1
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 2 then
            block_x = block_x - 1
            draw_block(block_x, block_y, figure_number)
        elsif figure(i) = 3 then
            block_y = block_y - 1
            draw_block(block_x, block_y, figure_number)
        fi
    next
    
end sub

sub display_preview_figure(next_figure_number)
    local next_figure_root_block_x
    local next_figure_root_block_y
    local next_figure(4)
    
    choose_figure(next_figure(), next_figure_number)
    
    next_figure_root_block_x = set_root_block_x(PREVIEW_START_X, next_figure_number)
    next_figure_root_block_y = set_root_block_y(PREVIEW_START_Y, next_figure_number)

    REM clear the preview window
    color 11,11,51
    fill rectangle FIELD_OFFSET_X+FIELD_WIDTH+PREVIEW_WINDOW_WIDTH/2, FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2 to FIELD_OFFSET_X+FIELD_WIDTH+PREVIEW_WINDOW_WIDTH/2+PREVIEW_WINDOW_WIDTH, FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2+PREVIEW_WINDOW_HEIGHT
    
    REM draw the next figure
    color 150,150,150
    draw_preview_figure(next_figure_root_block_x, next_figure_root_block_y, next_figure(), next_figure_number)
    
end sub

sub draw_preview_figure(block_x, block_y, preview_figure(), next_figure_number)
    local i
    local preview
    preview = 1
    for i=0 to arraysize(preview_figure(), 1)
        if preview_figure(i) = 0 then
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 1 then
            block_x = block_x + 1
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 2 then
            block_x = block_x - 1
            draw_block(block_x, block_y, next_figure_number, preview)
        elsif preview_figure(i) = 3 then
            block_y = block_y - 1
            draw_block(block_x, block_y, next_figure_number, preview)
        fi
    next
    
end sub


sub choose_figure(figure(), figure_number)
    
    if figure_number = 0 then          REM horizontal stick
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 1 then       REM vertical stick
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 2 then       REM square block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 3 then       REM bottom-left nose down horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 4 then       REM bottom-right nose top left vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 5 then       REM bottom-left nose up horizontal L
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 6 then       REM nose bottom right vertical L
        figure(0) = 0
        figure(1) = 2
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
        
        
        
    elsif figure_number = 7 then       REM bottom-right nose down horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 8 then       REM nose bottom left vertical L
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 9 then       REM bottom-right nose up left horizontal L
        figure(0) = 0
        figure(1) = 2
        figure(2) = 2
        figure(3) = 3
        figure(4) = 0
        return 1
    elsif figure_number = 10 then       REM bottom-left nose top right vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 1
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 11 then       REM left bottom horizontal S-block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 1
        figure(4) = 0
        return 1
    elsif figure_number = 12 then      REM right bottom vertical S-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 3
        figure(4) = 0
        return 1
        
        
    elsif figure_number = 13 then       REM right bottom horizontal S-block
        figure(0) = 0
        figure(1) = 2
        figure(2) = 3
        figure(3) = 2
        figure(4) = 0
        return 1
    elsif figure_number = 14 then       REM left bottom vertical S-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 3
        figure(4) = 0
        return 1
        
    elsif figure_number = 15 then      REM nose top horizontal T-block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    elsif figure_number = 16 then      REM nose right vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    elsif figure_number = 17 then      REM nose down horizontal T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 1
        return 1
    elsif figure_number = 18 then      REM nose left vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 3
        return 1
    fi
end sub


sub set_root_block_x(root_block_x, figure_number)
    switch figure_number
        case 0: return root_block_x-2  REM horizontal stick
        case 2: return root_block_x-1  REM square block
        case 3: return root_block_x-1  REM bottom-left horizontal L
        case 4: return root_block_x+1  REM L
        case 5: return root_block_x-1  REM L
        case 6: return root_block_x+1  REM L
        case 7: return root_block_x+1  REM right bottom horizontal S-block
        case 8: return root_block_x-1  REM L
        case 9: return root_block_x+1  REM L
        case 10: return root_block_x-1 REM L
        
        case 11: return root_block_x-1 REM left bottom horizontal S-block
        case 12: return root_block_x+1 REM right bottom vertical S-block
        case 13: return root_block_x   REM right bottom horizontal S-block
        case 14: return root_block_x   REM left bottom vertical S-block
        
        case 15: return root_block_x-1 REM nose top horizontal T-block
        case 17: return root_block_x-1 REM nose down horizontal T-block
        default: return root_block_x
    end switch
end sub


sub set_root_block_y(root_block_y, figure_number)
    switch figure_number
        case 0: return root_block_y    REM horizontal stick
        case 1: return root_block_y+3  REM vertical stick
        
        case 4: return root_block_y+2  REM vertical L
        case 6: return root_block_y+2  REM vertical L
        case 8: return root_block_y+2  REM vertical L
        case 10: return root_block_y+2 REM vertical L
        
        case 12: return root_block_y+2 REM vertical S-block
        case 14: return root_block_y+2 REM vertical S-block
        
        case 16: return root_block_y+2 REM nose left vertical T-block
        case 18: return root_block_y+2 REM nose right vertical T-block
        default: return root_block_y+1
    end switch
end sub


sub is_turn_over(root_block_x, root_block_y, figure_number)
    if root_block_y = 20 or MATRIX(root_block_x, root_block_y) = 2 then
        clear_figure(root_block_x, root_block_y, figure())
        root_block_y = root_block_y - 1
        draw_figure(root_block_x, root_block_y, figure(), figure_number)
        return 1
    fi
    return 0
end sub


sub pause_game()
    keystroke$ = inkey$()
    if keystroke$ = "p" then
        return 1
    fi
end sub


sub game_over()
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    color 150,150,150
    text int(WINDOW_WIDTH/2)-25, int(WINDOW_HEIGHT/2), "Game Over"
    inkey$
    exit
end sub


sub is_move_ok(figure(), block_x, block_y)
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 1 then
            block_x = block_x + 1
        elsif figure(i) = 2 then
            block_x = block_x - 1
        elsif figure(i) = 3 then
            block_y = block_y - 1
        fi
        if block_x < 0: return 0
        if block_x > 9: return 0
        if block_y < 0: return 0
        if block_y > 19: return 0
        if MATRIX(block_x, block_y) > 0: return 0
    next
    return 1
end sub


sub turn_is_over(block_x, block_y, figure())
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 1 then
            block_x = block_x + 1
        elsif figure(i) = 2 then
            block_x = block_x - 1
        elsif figure(i) = 3 then
            block_y = block_y - 1
        fi
        MATRIX(block_x, block_y) = 1
    next
end sub


sub rotate_clockwise(root_block_x, root_block_y, figure(), figure_number)
# global INTERMEDIATE_BLOCKS are necessary because the sub cannot return multiple values
# local temporary_blocks come handy in this sub to make things shorter
    INTERMEDIATE_BLOCK_X = root_block_x
    INTERMEDIATE_BLOCK_Y = root_block_y
    
    REM horizontal stick
    if figure_number=0 then
        figure_number_rotated = 1
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y+1) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y+1
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM vertical stick
    elsif figure_number=1 then
        figure_number_rotated = 0
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y-1) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y-1
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM No need to rotate the square block
    
    REM bottom-left nose down horizontal L
    elsif figure_number=3 then
        figure_number_rotated = 4
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose top left vertical L
    elsif figure_number=4 then
        figure_number_rotated = 5
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-left nose up horizontal L
    elsif figure_number=5 then
        figure_number_rotated = 6
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose bottom right vertical L
    elsif figure_number=6 then
        figure_number_rotated = 3
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose down horizontal L
    elsif figure_number=7 then
        figure_number_rotated = 8
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose bottom left vertical L
    elsif figure_number=8 then
        figure_number_rotated = 9
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+2, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+2
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-right nose up left horizontal L
    elsif figure_number=9 then
        figure_number_rotated = 10
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM bottom-left nose top right vertical L
    elsif figure_number=10 then
        figure_number_rotated = 7
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
    REM left bottom horizontal S-block    
    elsif figure_number=11 then
        figure_number_rotated = 12
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM right bottom vertical S-block
    elsif figure_number=12 then
        figure_number_rotated = 11
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM right bottom horizontal S-block    
    elsif figure_number=13 then
        figure_number_rotated = 14
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM left bottom vertical S-block
    elsif figure_number=14 then
        figure_number_rotated = 13
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM left bottom nose top horizontal T-brick
    elsif figure_number=15 then
        figure_number_rotated = 16
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x+1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x+1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose right vertical T-block
    elsif figure_number=16 then
        figure_number_rotated = 17
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose down horizontal T-block
    elsif figure_number=17 then
        figure_number_rotated = 18
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
        
    REM nose left vertical T-block
    elsif figure_number=18 then
        figure_number_rotated = 15
        choose_figure(rotated_figure(), figure_number_rotated)
        if is_move_ok(rotated_figure(), root_block_x-1, root_block_y) then
        
            clear_figure(root_block_x, root_block_y, figure())
            
            INTERMEDIATE_BLOCK_X = root_block_x-1
            INTERMEDIATE_BLOCK_Y = root_block_y
            figure_number = figure_number_rotated
            choose_figure(figure(), figure_number)
            
            draw_figure(INTERMEDIATE_BLOCK_X, INTERMEDIATE_BLOCK_Y, figure(), figure_number)
            
        fi
    fi
    return figure_number
end sub


sub main()
    clear screen REM reading keystrokes with inkey$() needs 'clear screen'
    open window WINDOW_WIDTH, WINDOW_HEIGHT
    backcolor 0,0,0
    REM backcolor does not work, that is why big black rectangle
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    
    REM draw field border
    color 150,150,150
    rectangle FIELD_OFFSET_X-1, FIELD_OFFSET_Y-1 to FIELD_OFFSET_X+FIELD_WIDTH+1, FIELD_OFFSET_Y+FIELD_HEIGHT+1
    REM draw next figure window
    rectangle FIELD_OFFSET_X+FIELD_WIDTH+PREVIEW_WINDOW_WIDTH/2-1, FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2-1 to FIELD_OFFSET_X+FIELD_WIDTH+PREVIEW_WINDOW_WIDTH/2+PREVIEW_WINDOW_WIDTH+1, FIELD_OFFSET_Y+PREVIEW_WINDOW_HEIGHT/2+PREVIEW_WINDOW_HEIGHT+1
    
    local figure_number
    local figure(4)
    local next_figure_number
    
    next_figure_number = int(ran(19))
    
    local i
    
#   "while not game over"-LOOP
    while(1=1)
        
        figure_number = next_figure_number
        next_figure_number = int(ran(19))
        
        display_preview_figure(next_figure_number)
        
#        figure_number = 15
#        print "figure_number: ",str$(figure_number)
#        print "next_figure_number: ",str$(next_figure_number)
        
# arrays are passed by reference to subroutines; no need to return the array
        choose_figure(figure(), figure_number)
        
        
        root_block_x = set_root_block_x(START_X, figure_number)
        root_block_y = set_root_block_y(START_Y, figure_number)
        
        if !is_move_ok(figure(), root_block_x, root_block_y) then
            draw_figure(root_block_x, root_block_y, figure(), figure_number)
            wait TIMEQUANT*10
            game_over()
        fi
        
        if root_block_y > 0: clear_figure(root_block_x, root_block_y, figure())
        root_block_y = root_block_y + 1
        draw_figure(root_block_x, root_block_y, figure(), figure_number)
                
#       "while figure is falling down and has not landed yet"-LOOP
        while(1=1)
            for i = 1 to 10
                keystroke$ = inkey$(TIMEQUANT)
                if !keystroke$="" then
                    if keystroke$ = "right" then
                        if is_move_ok(figure(), root_block_x+1, root_block_y) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_x = root_block_x + 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "left" then
                        if is_move_ok(figure(), root_block_x-1, root_block_y) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_x = root_block_x - 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "down" then
                        if is_move_ok(figure(), root_block_x, root_block_y+1) then
                            clear_figure(root_block_x, root_block_y, figure())
                            root_block_y = root_block_y + 1
                            draw_figure(root_block_x, root_block_y, figure(), figure_number)
                        fi
                    elsif keystroke$ = "up" then
                        figure_number = rotate_clockwise(root_block_x, root_block_y, figure(), figure_number)
                        root_block_x = INTERMEDIATE_BLOCK_X
                        root_block_y = INTERMEDIATE_BLOCK_Y
                    elsif keystroke$ = "p" then
                        pause_game()
                    elsif keystroke$ = "q" or keystroke$ = "esc" then
                        exit
                    fi
                fi
            next
            if root_block_y < 19 and is_move_ok(figure(), root_block_x, root_block_y+1) then
                clear_figure(root_block_x, root_block_y, figure())
                root_block_y = root_block_y + 1
                draw_figure(root_block_x, root_block_y, figure(), figure_number)
            else
                turn_is_over(root_block_x, root_block_y, figure())
                break
            fi
        wend
    wend
    game_over()
end sub

main()

#######################
































