#!/usr/bin/basic
# yabasic 2.7x

dim BLOCK_COLOR(4)
dim figure(4)

COLUMNS = 10
ROWS = 20

# measures in pixels
WINDOW_WIDTH = 768 rem PAL TV norm
WINDOW_HEIGHT = 576
BLOCK_WIDTH = 25
FIELD_OFFSET_X = 200
FIELD_OFFSET_Y = 50
FIELD_WIDTH = BLOCK_WIDTH * COLUMNS
FIELD_HEIGHT = BLOCK_WIDTH * ROWS

# measures in blocks
dim MATRIX(9,19)

# needs to be adjusted to the actual figure when necessary
START_X = 5
START_Y = 0

# measures in seconds
TIMEQUANT = 0.1



sub is_move_ok()
    return 1
end sub

sub clear_block(block_x, block_y)
    color 0,0,0
    fill rectangle FIELD_OFFSET_X+block_x*BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH to FIELD_OFFSET_X+block_x*BLOCK_WIDTH+BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
end sub

sub draw_block(block_x, block_y)
    color 155,155,200
    fill rectangle FIELD_OFFSET_X+block_x*BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH to FIELD_OFFSET_X+block_x*BLOCK_WIDTH+BLOCK_WIDTH, FIELD_OFFSET_Y+block_y*BLOCK_WIDTH+BLOCK_WIDTH
end sub

sub clear_figure(root_block_x, root_block_y, figure())
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            clear_block(root_block_x, root_block_y)
        elsif figure(i) = 1 then
            root_block_x = root_block_x + 1
            clear_block(root_block_x, root_block_y)
        elsif figure(i) = 2 then
            root_block_x = root_block_x - 1
            clear_block(root_block_x, root_block_y)
        elsif figure(i) = 3 then
            root_block_y = root_block_y - 1
            clear_block(root_block_x, root_block_y)
        fi
    next
end sub

sub draw_figure(root_block_x, root_block_y, figure())
    for i=0 to arraysize(figure(), 1)
        if figure(i) = 0 then
            draw_block(root_block_x, root_block_y)
        elsif figure(i) = 1 then
            root_block_x = root_block_x + 1
            draw_block(root_block_x, root_block_y)
        elsif figure(i) = 2 then
            root_block_x = root_block_x - 1
            draw_block(root_block_x, root_block_y)
        elsif figure(i) = 3 then
            root_block_y = root_block_y - 1
            draw_block(root_block_x, root_block_y)
        fi
    next
    
end sub

sub choose_figure(figure(), figure_number)
    
    if figure_number = 0 then                  REM horizontal stick
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 1
        return 1
    elsif figure_number = 1 then               REM vertical stick
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 3
        return 1
    elsif figure_number = 2 then               REM square block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 3
        figure(3) = 2
        return 1
    elsif figure_number = 3 then               REM bottom-left horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 1
        return 1
    elsif figure_number = 4 then               REM bottom-right horizontal L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 2
        return 1
    elsif figure_number = 5 then               REM bottom-left vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 1
        return 1
    elsif figure_number = 6 then               REM bottom-right vertical L
        figure(0) = 0
        figure(1) = 3
        figure(2) = 3
        figure(3) = 2
        return 1
    elsif figure_number = 7 then               REM nose top horizontal T-block
        figure(0) = 0
        figure(1) = 1
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    elsif figure_number = 8 then               REM nose down horizontal T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 1
        return 1
    elsif figure_number = 9 then               REM nose left vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 2
        figure(3) = 1
        figure(4) = 3
        return 1
    elsif figure_number = 10 then               REM nose right vertical T-block
        figure(0) = 0
        figure(1) = 3
        figure(2) = 1
        figure(3) = 2
        figure(4) = 3
        return 1
    fi
end sub

sub set_root_block_x(root_block_x, figure_number)
    switch figure_number
        case 0: return root_block_x-2  REM horizontal stick
        case 3: return root_block_x-1  REM bottom-left horizontal L
        case 4: return root_block_x+1  REM bottom-right horizontal L
        case 7: return root_block_x-1  REM nose top horizontal T-block
        case 8: return root_block_x-1  REM nose down horizontal T-block
        default: return root_block_x
    end switch
end sub

sub set_root_block_y(root_block_y, figure_number)
    switch figure_number
        case 0: return root_block_y    REM horizontal stick
        case 1: return root_block_y+3  REM vertical stick
        case 5: return root_block_y+2  REM bottom-left vertical L
        case 6: return root_block_y+2  REM bottom-right vertical L
        case 9: return root_block_y+2  REM nose left vertical T-block
        case 10: return root_block_y+2 REM nose right vertical T-block
        default: return root_block_y+1
    end switch
end sub

sub is_turn_over(root_block_x, root_block_y)
    return 0
end sub

sub is_game_over(root_block_x, root_block_y)
    return 0
end sub

sub pause_game()
    keystroke$ = inkey$()
    if keystroke$ = "p" then
        return 1
    fi
end sub

sub game_over()
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    color 150,150,150
    text int(WINDOW_WIDTH/2)-25, int(WINDOW_HEIGHT/2), "Game Over"
    inkey$
    exit
end sub

sub main()
    clear screen REM reading keystrokes with inkey$() needs 'clear screen'
    open window WINDOW_WIDTH, WINDOW_HEIGHT
    backcolor 0,0,0
    REM backcolor does not work, that is why big black rectangle
    color 0,0,0
    fill rectangle 0,0 to WINDOW_WIDTH, WINDOW_HEIGHT
    
    REM draw field border
    color 150,150,150
    rectangle FIELD_OFFSET_X, FIELD_OFFSET_Y to FIELD_OFFSET_X+FIELD_WIDTH, FIELD_OFFSET_Y+FIELD_HEIGHT
    
    while(!is_game_over(root_block_x, root_block_y))
        
        local figure_number
        figure_number = int(ran(11))
        
# arrays are passed by reference to subroutines; no need to return the array
        local figure(4)
        choose_figure(figure(), figure_number)
        
        
        root_block_x = set_root_block_x(START_X, figure_number)
        root_block_y = set_root_block_y(START_Y, figure_number)
        
        clear_figure(root_block_x, root_block_y, figure())
        root_block_y = root_block_y + 1
        draw_figure(root_block_x, root_block_y, figure())
        
        while(!is_turn_over(root_block_x, root_block_y))
            for i = 1 to 10
                direction$ = inkey$(TIMEQUANT)
                if direction$ = "right" then
                    if root_block_x < COLUMNS then
                        clear_figure(root_block_x, root_block_y, figure())
                        root_block_x = root_block_x + 1
                        draw_figure(root_block_x, root_block_y, figure())
                    fi
                elsif direction$ = "left" then
                    if root_block_x > 0 then
                        clear_figure(root_block_x, root_block_y, figure())
                        root_block_x = root_block_x - 1
                        draw_figure(root_block_x, root_block_y, figure())
                    fi
                elsif direction$ = "down" then
                    if root_block_y > 0 and MATRIX(root_block_x, root_block_y+1) = 0 then
                        clear_figure(root_block_x, root_block_y, figure())
                        root_block_y = root_block_y + 1
                        draw_figure(root_block_x, root_block_y, figure())
                    fi
                elsif direction$ = "p" then
                    pause_game()
                elsif direction$ = "q" or direction$ = "esc" then
                    exit
                fi
            next
            if root_block_y > 0 and MATRIX(root_block_x, root_block_y+1) = 0 then
                clear_figure(root_block_x, root_block_y, figure())
                root_block_y = root_block_y + 1
                draw_figure(root_block_x, root_block_y, figure())
            fi
        wend
    wend
    
end sub

main()

#######################
































